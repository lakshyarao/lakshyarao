#include <stdio.h>
#include <stdlib.h>

long largestRectangle(int h[], int n) {
    int *stack = (int *)malloc(n * sizeof(int));
    int top = -1; // Stack pointer
    long max_area = 0;

    int i = 0;
    while (i < n) {
        // Push if the stack is empty or height is increasing
        if (top == -1 || h[stack[top]] <= h[i]) {
            stack[++top] = i;
            i++;
        } else {
            int height = h[stack[top--]];
            int width = (top == -1) ? i : (i - stack[top] - 1);
            long area = (long)height * width;
            if (area > max_area)
                max_area = area;
        }
    }

    // Process remaining bars in stack
    while (top != -1) {
        int height = h[stack[top--]];
        int width = (top == -1) ? i : (i - stack[top] - 1);
        long area = (long)height * width;
        if (area > max_area)
            max_area = area;
    }

    free(stack);
    return max_area;
}

int main() {
    int n;
    scanf("%d", &n);
    int *h = (int *)malloc(n * sizeof(int));
    
    for (int i = 0; i < n; i++) {
        scanf("%d", &h[i]);
    }

    printf("%ld\n", largestRectangle(h, n));
    free(h);
    return 0;
}
